#Prepare initial instance for an official image of Drupal based on Docker Hub
#https://hub.docker.com/_/drupal/
#
# To work with PHP8.1 set "FROM drupal:rc-apache-buster"
# To work with PHP8.0 set "FROM drupal:9-apache"
# To work with PHP7.4 set "FROM drupal:8-apache"
#
FROM drupal:rc-apache-buster

ENV DRUSH_LAUNCHER_VER="0.10.1" \
    DRUPAL_CONSOLE_LAUNCHER_VER="1.9.7"

#Enable proper composer version (default version 1)
#ENV COMPOSER_VERSION="1"
ENV COMPOSER_VERSION="2"

RUN apt-get update -y; \
  apt-get install -y net-tools \
            git \
            unzip \
            wget \
            mariadb-client \
            vim

## UNCOMMENT IF POSTGRES CONTAINER IS ENABLED
##------------------------
## #Prepare Postgre client installation
# RUN apt-get update && \
#     apt-get install -y lsb-release gnupg2 wget
# RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc > /tmp/postgres.pgp
# RUN apt-key add /tmp/postgres.pgp
# RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |tee /etc/apt/sources.list.d/pgdg.list
# RUN apt-get update; \
#   apt-get install -y postgresql-client-12
##------------------------


# Install composer, drush launcher, drush extensions, drupal console
RUN set -ex && \
    cd ~ && \
    curl -sS https://getcomposer.org/installer -o composer-setup.php && \
    php composer-setup.php --install-dir=/usr/local/bin --filename=composer --${COMPOSER_VERSION} && \
    # Drush launcher
    drush_launcher_url="https://github.com/drush-ops/drush-launcher/releases/download/${DRUSH_LAUNCHER_VER}/drush.phar" && \
    wget -O drush.phar "${drush_launcher_url}" && \
    chmod +x drush.phar && \
    mv drush.phar /usr/local/bin/drush && \
    # Drush extensions
    drush_patchfile_url="https://bitbucket.org/davereid/drush-patchfile.git" && \
    git clone "${drush_patchfile_url}" /root/.drush/drush-patchfile && \
    drush_rr_url="https://ftp.drupal.org/files/projects/registry_rebuild-7.x-2.5.tar.gz" && \
    wget -qO- "${drush_rr_url}" | tar zx -C /root/.drush && \
    # Drupal console
    console_url="https://github.com/hechoendrupal/drupal-console-launcher/releases/download/${DRUPAL_CONSOLE_LAUNCHER_VER}/drupal.phar" && \
    curl "${console_url}" -L -o drupal.phar && \
    mv drupal.phar /usr/local/bin/drupal && \
    chmod +x /usr/local/bin/drupal
    # Install Redis client
RUN cd /tmp && \
    wget https://github.com/phpredis/phpredis/archive/5.3.7.zip -O phpredis.zip && \
    unzip -o /tmp/phpredis.zip && mv /tmp/phpredis-* /tmp/phpredis && cd /tmp/phpredis && phpize && ./configure && make && make install && \
    touch /usr/local/etc/php/conf.d/redis.ini && echo extension=redis.so > /usr/local/etc/php/conf.d/redis.ini

##Installing LDAP php module
#RUN \
#    apt-get update && \
#    apt-get install libldap2-dev -y && \
#    docker-php-ext-configure ldap && \
#    docker-php-ext-install ldap

# **********************************************************
# ***** DEVELOPMENT PURPOSES *******************************
# **********************************************************
#RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - \
#    && apt-get install -y apt-utils nodejs

#RUN npm install --global gulp-cli

# Add certificate for apache SSL
ADD ssl/localhost.crt /etc/ssl/certs/apache-selfsigned.crt
ADD ssl/localhost.key /etc/ssl/private/apache-selfsigned.key
ADD ssl/ssl-params.conf /etc/apache2/conf-available/ssl-params.conf
RUN a2enmod ssl

# Remove all PHP cache system for development purposes
RUN { \
#    echo 'opcache.memory_consumption=128'; \
#    echo 'opcache.interned_strings_buffer=8'; \
#    echo 'opcache.max_accelerated_files=4000'; \
#    echo 'opcache.revalidate_freq=60'; \
#    echo 'opcache.fast_shutdown=1'; \
        echo ''; \
  } > /usr/local/etc/php/conf.d/opcache-recommended.ini
RUN { \
#    echo 'opcache.memory_consumption=128'; \
#    echo 'opcache.interned_strings_buffer=8'; \
#    echo 'opcache.max_accelerated_files=4000'; \
#    echo 'opcache.revalidate_freq=60'; \
#    echo 'opcache.fast_shutdown=1'; \
        echo ''; \
  } > /usr/local/etc/php/conf.d/docker-php-ext-opcache.ini


# Install XDebug
#RUN pecl install xdebug

# Create user to be available to connect via SSH with the apache group to avoid use root
RUN useradd docker -m -s /bin/bash \
  && echo docker:docker | chpasswd
RUN curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o /home/docker/.git-completion.bash
ADD php/.bashrc /home/docker/.bashrc
ADD ssh/id_rsa /home/docker/.ssh/id_rsa
ADD ssh/id_rsa.pub /home/docker/.ssh/id_rsa.pub
RUN chown -R docker:docker /home/docker/ && \
    chmod 400 /home/docker/.ssh/id_rsa && \
    chown -R docker:root /etc/ssl/private/  && \
    sed -i 's/www-data:x:33:/www-data:x:33:docker/g' /etc/group

#Set default directory when access into the container
WORKDIR /var/www/html
USER docker
